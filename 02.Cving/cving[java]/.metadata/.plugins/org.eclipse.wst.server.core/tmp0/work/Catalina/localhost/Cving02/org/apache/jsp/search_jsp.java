/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.51
 * Generated at: 2022-11-17 08:48:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import cving.dbms.*;
import cving.util.*;
import cving.vo.*;

public final class search_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/./config/config.jsp", Long.valueOf(1667983400510L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("cving.dbms");
    _jspx_imports_packages.add("cving.vo");
    _jspx_imports_packages.add("cving.util");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

UserVO LoginVO = (UserVO)session.getAttribute("login");
if(LoginVO == null)
{
	//로그인을 하지 않으면 login페이지로 넘겨준다.
	response.sendRedirect("login.jsp");
	return;
}
request.setCharacterEncoding("euc-kr");

String key = request.getParameter("key");


      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<meta charset=\"EUC-KR\">\r\n");
      out.write("\t\t<title>search</title>\r\n");
      out.write("\t\t<link rel=\"stylesheet\" href=\"css/cving.css\">\r\n");
      out.write("\t\t<script src=\"./jquery-3.6.0.js\"></script>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\twindow.onload = function()\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\t$(\"input\").keyup(function(e){\r\n");
      out.write("\t\t\t\tif(e.keyCode == 13)\r\n");
      out.write("\t\t\t\t{\r\n");
      out.write("\t\t\t\t\tDoSearch();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#btn_search\").click(function(){\r\n");
      out.write("\t\t\t\tDoSearch();\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction DoSearch()\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tif($(\"#search\").val() == \"\")\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\talert(\"검색어를 입력하세요!\");\r\n");
      out.write("\t\t\t\t$(\"#search\").foucus();\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tdocument.location = \"search.jsp?key=\" + $(\"#search\").val();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t<body>\r\n");
      out.write("\t\t<div class=\"container\">\r\n");
      out.write("\t\t\t<header id = \"header\">\r\n");
      out.write("\t\t\t\t<div class=\"logo\">\r\n");
      out.write("\t\t\t\t\t<a href=\"./index.jsp\">\r\n");
      out.write("\t\t\t\t\t<img src=\"./img/logoback.png\" style=\"width: 100%; height: 100%;\">\r\n");
      out.write("\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"logout\">\r\n");
      out.write("\t\t\t\t\t<a href=\"./logout.jsp\">로그아웃</a>\r\n");
      out.write("\t\t\t\t</div>\t\t\t\t\r\n");
      out.write("\t\t\t\t<div class=\"search\">\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" id=\"search\" name=\"search\" placeholder=\" 제목 장르 검색 해보세요 \">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"b_search\">\r\n");
      out.write("\t\t\t\t\t<img src=\"./img/search.png\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</header>\r\n");
      out.write("\t\t\t<section class=\"search_movie\">\r\n");
      out.write("\t\t\t</section>\r\n");
      out.write("\t\t\t<div id=\"wrap\">\r\n");
      out.write("\t\t\t<div class=\"m_imgin\" style=\"padding:50px 0px 100px 0px;\">\r\n");
      out.write("\t\t\t<h1>'");
      out.print( key );
      out.write("'(이)가 포함된 제목별 검색 결과</h1>\r\n");
      out.write("\t\t\t");

			
			DBManager db = new DBManager();
			db.DBOpen();
			String sql = "";
			sql = "select hobby from hobby where uno = " + LoginVO.getUno(); //hobby 테이블에 로그인한 유저 vo의 번호와 uno가 맞으면 hobby컬럼을 가지고 온다.
			db.OpenQuery(sql);
			String hobby = "";
			while(db.GetNext())
			{
				if(!hobby.equals("")) hobby += ","; 
				hobby += db.GetValue("hobby");
			}
			System.out.println("내 장르:" + hobby);
			String realhobby[] = hobby.split(","); //쉼표를 기준으로 문자열을 나눠서 배열을 만들어준다.
			db.CloseQuery();
			
			sql = "";
			sql  = "select mimg, mcode  from (select mimg, mcode from movie ";
			sql += "where used = 'Y' and mtitle like + '%"+ key +"%' ";
			sql += "order by rand() limit 0, 100 ) x limit 0, 8 ";
			int count = 1;
			boolean isCheckData = false;
			db.OpenQuery(sql);
			while(db.GetNext()) //여러줄을 가져와야해서 while반복문을 써서 계속 가져오게 하는것 
			{
				isCheckData = true;
				String mimg = db.GetValue("mimg");
				String mcode = db.GetValue("mcode");
				mimg = mimg.replace("https://movie-phinf.pstatic.net","");
				mimg = "./img/" + mimg.replace("/","_");
				if(mimg.equals("없음"))
				{
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"./info.jsp?code=");
      out.print( mcode );
      out.write("\"><img src=\"./img/img_null.png\"></a>\r\n");
      out.write("\t\t\t\t\t");

				}
				else
				{
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"./info.jsp?code=");
      out.print( mcode );
      out.write("\"><img src=\"");
      out.print( mimg );
      out.write("\"></a>\r\n");
      out.write("\t\t\t\t\t");

				}
				if(count % 4 == 0)
				{
					
      out.write("\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"m_imgin\" style=\"padding:50px 0px 100px 0px;\">\r\n");
      out.write("\t\t\t\t\t");

				}
				count++;
			}
			db.CloseQuery();
			
			if(isCheckData == false)
			{
				
      out.write("\r\n");
      out.write("\t\t\t\t<div align=\"center\">'");
      out.print( key );
      out.write("'로검색된 데이터가 없습니다</div>\r\n");
      out.write("\t\t\t\t");

			}
			
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<h1>'");
      out.print( key );
      out.write("'(이)가 포함된 장르별 검색 결과</h1>\r\n");
      out.write("\t\t\t");

			
			sql = "";
			sql  = "select mimg, mcode  from (select mimg, mcode from movie ";
			sql += "where used = 'Y' and mhobby like + '%"+ key +"%' ";
			sql += "order by rand() limit 0, 100 ) x limit 0, 8 ";
			int con = 1;
			boolean isCheckhobby = false;
			db.OpenQuery(sql);
			while(db.GetNext()) //여러줄을 가져와야해서 while반복문을 써서 계속 가져오게 하는것 
			{
				isCheckhobby = true;
				String mimg = db.GetValue("mimg");
				String mcode = db.GetValue("mcode");
				mimg = mimg.replace("https://movie-phinf.pstatic.net","");
				mimg = "./img/" + mimg.replace("/","_");
				if(mimg.equals("없음"))
				{
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"./info.jsp?code=");
      out.print( mcode );
      out.write("\"><img src=\"./img/img_null.png\"></a>\r\n");
      out.write("\t\t\t\t\t");

				}
				else
				{
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"./info.jsp?code=");
      out.print( mcode );
      out.write("\"><img src=\"");
      out.print( mimg );
      out.write("\"></a>\r\n");
      out.write("\t\t\t\t\t");

				}
				if(con % 4 == 0)
				{
					
      out.write("\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"m_imgin\" style=\"padding:50px 0px 100px 0px;\">\r\n");
      out.write("\t\t\t\t\t");

				}
				con++;
			}
			db.CloseQuery();
			
			if(isCheckhobby == false)
			{
				
      out.write("\r\n");
      out.write("\t\t\t\t<div align=\"center\">\r\n");
      out.write("\t\t\t\t'");
      out.print( key );
      out.write("'로검색된 데이터가 없습니다</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t");
 
			}	
			if(isCheckhobby == false && isCheckData == false)
			{
				
      out.write("\r\n");
      out.write("\t\t\t\t<h1>[ ");
      out.print( LoginVO.getUname() );
      out.write(" ]님이 좋아하실만한 다른 장르 영화 추천</h1>\r\n");
      out.write("\t\t\t\t<div id=\"wrap\" style=\"margin-top:30px; width:100%; height:300px; display:flex;\">\r\n");
      out.write("\t\t\t\t\t");

					String gender = "";
					String age = "";
					
					age = LoginVO.getUage();
					
					if(LoginVO != null && LoginVO.getUgender().equals("M"))
					{
						gender = "male";
					}else if(LoginVO != null && LoginVO.getUgender().equals("W"))
					{
						gender = "female";
					}
					sql = "select sum(x." +gender +") as gender,sum(x." +age + ") as age,y.mhobby ";
					sql += "from movie x inner join genre y ";
					sql +="on x.mcode = y.mcode ";
					sql +="group by y.mhobby "; 
					sql +="order by gender desc, age desc ";
					//System.out.print(subsql);
					
					db.OpenQuery(sql);
					String new_hobby = "";
					int hit = 0;
					
					while(db.GetNext())
					{	
						if(hobby.indexOf(db.GetValue("mhobby")) > -1)
						{
							continue;
						}
						else
						{
							if(!new_hobby.equals(""))
								new_hobby += ",";
							
							new_hobby += db.GetValue("mhobby");
							count++;
							if( hit == 3)
								break;
						}
						
					}
					System.out.println("만들어진 추천장르 : " + new_hobby);
					db.CloseQuery();
					
					String hobby_list[] = new_hobby.split(",");
					for(int i = 0; i < hobby_list.length; i++)
					{
						
						System.out.println(hobby_list[i]);
					}
					sql = "select mcode,mhobby,mscore,mimg  from( ";
					sql += "select mcode, mhobby, mscore, mimg from movie ";
					sql += "where 1=1 "; //무조건 참 
					sql += "and mscore < 9.50 "; //평점9.50보다 작은거
					sql += "and mscore > 8.30 ";
					sql += "and used = 'Y' "; //영화가 정상적인 영화인지 ..
					if(gender.equals("male"))
					{
						sql += "and male > female ";
						//sql += "and male < 100 "; 
					}else
					{
						sql += "and male < female ";
						//sql += "and female < 100 ";
					}
					sql += "and " + age + " > 30 ";
					String sub_sql = "";
					
					for(int i = 0; i < hobby_list.length; i++)
					{
						if( !sub_sql.equals(""))
						{
							sub_sql += " or ";
						}
						sub_sql +=  " mhobby in (select mhobby from genre where mhobby like '%"+ hobby_list[i] +"%') ";
					}
					if( !sub_sql.equals(""))
					{
						sql += "and(" + sub_sql + ") ";
					}
					sql += "order by rand() limit 0, 100 ) x ";
					sql += "limit 0, 4 ";//점수기준 평점 내림차순으로 
					db.OpenQuery(sql);
					while(db.GetNext())
					{
						String mcode = db.GetValue("mcode");
						String mimg = db.GetValue("mimg");
						
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<div class=\"m_imgin\" style=\"padding:0px 0px 100px 0px;\">\r\n");
      out.write("\t\t\t\t\t\t\t<a href=\"info.jsp?code=");
      out.print( mcode );
      out.write("\"><img src=\"");
      out.print( mimg );
      out.write("\"></a>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t");

					}
					db.CloseQuery();
					db.DBClose();
			
			}
			
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t\t<footer>\r\n");
      out.write("\t\t\t\t<article class=\"foot_menu\">\r\n");
      out.write("\t\t\t\t \t<hr style=\"background-color:white;\">\r\n");
      out.write("\t\t\t\t\t명칭: 주식회사 이젠 | 등록번호: 전북 소4048 | 등록연월일: 2022. 10. 14 | 제호: CVING<br>\r\n");
      out.write("\t\t\t\t\t발행: C team  | 발행소: 전라북도 전주시 덕진구 금암동 이젠컴퓨터학원 4층 407호<br>\r\n");
      out.write("\t\t\t\t\tCVING의 콘텐츠는 저작권법의 보호를 받으므로, 무단 전재, 복사, 배포 등을 금합니다.<br>\r\n");
      out.write("\t\t\t\t</article>\r\n");
      out.write("\t\t\t\t</footer>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
